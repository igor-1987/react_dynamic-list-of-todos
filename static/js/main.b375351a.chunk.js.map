{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/FilterType.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodoId","setSelectedTodoId","setIsLoadedUser","className","map","id","title","completed","cn","type","onClick","TodoFilter","filterType","setFilterType","query","setQuery","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","getUser","userId","TodoModal","selectedTodo","setSelectedTodo","isLoadedUser","useState","user","setUser","useEffect","fetchUser","a","fetchedUser","Error","href","email","name","App","todoId","setTodos","isLoadedTodos","setIsLoadedTodos","ALL","filterBy","setFilterBy","todoList","propLower","prop","toLocaleLowerCase","visibleTodos","filter","todo","includes","ACTIVE","COMPLETED","filteredTodos","fetchTodos","data","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b375351a.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selectedTodoId: number,\n  setSelectedTodoId: (todoId: number) => void,\n  setIsLoadedUser: (value: boolean) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  setSelectedTodoId,\n  setIsLoadedUser,\n}) => {\n  const selectTodoHandler = (todoId: number) => {\n    setSelectedTodoId(todoId);\n    setIsLoadedUser(false);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(({ id, title, completed }) => (\n          <tr data-cy=\"todo\" key={id}>\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn(\n                  { 'has-text-danger': !completed },\n                  { 'has-text-success': completed },\n                )}\n              >\n                {title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => selectTodoHandler(id)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn(\n                      'far',\n                      { 'fa-eye': selectedTodoId !== id },\n                      { 'fa-eye-slash': selectedTodoId === id },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FilterType } from '../../types/FilterType';\n\ninterface Props {\n  filterType: FilterType,\n  setFilterType: (filterType: FilterType) => void,\n  query: string,\n  setQuery: (query: string) => void,\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  filterType,\n  setFilterType,\n  query,\n  setQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterType}\n          onChange={event => {\n            setFilterType(event.target.value as FilterType);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p\n      className=\"\n        control\n        is-expanded\n        has-icons-left\n        has-icons-right\n      \"\n    >\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span\n          className=\"icon is-right\"\n          style={{ pointerEvents: 'all' }}\n        >\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { useState, useEffect } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\n\ninterface Props {\n  selectedTodo: Todo,\n  setSelectedTodo: (todoId: number) => void;\n  isLoadedUser: boolean;\n  setIsLoadedUser: (status: boolean) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setSelectedTodo,\n  isLoadedUser,\n  setIsLoadedUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = selectedTodo;\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const fetchedUser = await getUser(userId);\n\n        setUser(fetchedUser);\n        setIsLoadedUser(true);\n      } catch (error) {\n        throw new Error('User not found!');\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isLoadedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(0)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p\n              className=\"block\"\n              data-cy=\"modal-title\"\n            >\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={cn(\n                  { 'has-text-success': completed },\n                  { 'has-text-danger': !completed },\n                )}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterType } from './types/FilterType';\n\nconst filteredTodos = (\n  query: string,\n  todos: Todo[],\n  filterType: FilterType,\n) => {\n  const propLower = (prop: string) => prop.toLocaleLowerCase();\n\n  const visibleTodos = todos.filter(todo => (\n    propLower(todo.title).includes(propLower(query))\n  ));\n\n  switch (filterType) {\n    case FilterType.ACTIVE:\n      return visibleTodos.filter(todo => !todo.completed);\n\n    case FilterType.COMPLETED:\n      return visibleTodos.filter(todo => todo.completed);\n\n    default:\n      return visibleTodos;\n  }\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [isLoadedUser, setIsLoadedUser] = useState(false);\n  const [isLoadedTodos, setIsLoadedTodos] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState<FilterType>(FilterType.ALL);\n\n  const getTodo = (todoId: number) => {\n    return todos.find(todo => todo.id === todoId) || todos[0];\n  };\n\n  const todoList = filteredTodos(query, todos, filterBy);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const data = await getTodos();\n\n        setTodos(data);\n        setIsLoadedTodos(true);\n      } catch (error) {\n        throw new Error('Error of loading todos!');\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterType={filterBy}\n                setFilterType={setFilterBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoadedTodos\n                ? (\n                  <TodoList\n                    todos={todoList}\n                    selectedTodoId={selectedTodoId}\n                    setSelectedTodoId={setSelectedTodoId}\n                    setIsLoadedUser={setIsLoadedUser}\n                  />\n                ) : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId !== 0 && (\n        <TodoModal\n          selectedTodo={getTodo(selectedTodoId)}\n          setSelectedTodo={setSelectedTodoId}\n          isLoadedUser={isLoadedUser}\n          setIsLoadedUser={setIsLoadedUser}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}